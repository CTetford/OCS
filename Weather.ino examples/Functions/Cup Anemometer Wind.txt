// -----------------------------------------------------------------------------------------------------------------
// gets windspeed in kph
// this is for a cup anemometer where each rotation causes switch (or hall effect) open/close event(s)
// the pin below counts the number of logic LOW to HIGH events in a given amount of time to calculate the RPM etc.

#define AnemometerPin 18              // interrupt capable pin
// see https://www.arduino.cc/reference/en/language/functions/external-interrupts/attachinterrupt/
#define AnemometerSamplePeriod 5000L  // in milliseconds
#define AnemometerPPM2KPH 0.086886    // converts from PPM (pulses per minute) to KPH

volatile unsigned long anemometerPulseCount = 0;
unsigned long anemometerWindSpeedKPH = 0;

// return (invalid) if not implemented or if there's an error
double weatherWindspeed() {
  if (!windspeedGood) return invalid;

  static unsigned long anemometerCheckTime = 0;
  long anemometerTimeElapsed = (long)(millis()-anemometerCheckTime);
  if (anemometerTimeElapsed >= AnemometerSamplePeriod) {
    anemometerCheckTime = millis();
    cli();
    long anemometerPulseCountThisElapsed = anemometerPulseCount;
    anemometerPulseCount = 0;
    sei();
    // convert pulses per sample period to PPM
    long PPM=anemometerPulseCountThisElapsed * (60000L/anemometerTimeElapsed);
    anemometerWindSpeedKPH = PPM * AnemometerPPM2KPH;
  }

  if (anemometerWindSpeedKPH < 0 || anemometerWindSpeedKPH > 350) anemometerWindSpeedKPH=invalid;
  return anemometerWindSpeedKPH;
}

void anemometerCountISR() { anemometerPulseCount++; }

bool initWindspeed() {
  attachInterrupt(digitalPinToInterrupt(AnemometerPin), anemometerCountISR, RISING);
  return true;
}