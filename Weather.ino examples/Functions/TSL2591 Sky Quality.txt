// -----------------------------------------------------------------------------------------------------------------
// gets sky brightness in mag/arc-sec^2

#define WEATHER_SKY_QUAL_ZERO         0.0 //    0.0, n. Where n=-2.0 to 2.0 (in mpsas) offset
#define WEATHER_SKY_QUAL_SCALE        1.0 //    1.0, n. Where n=-0.5 to 1.5 (x) sensitivity scale factor

double last_mag_per_sq_arcsec = invalid;
unsigned long last_mag_per_sq_arcsec_time = 0;
#include <Adafruit_TSL2591.h> // I2C addresses 0x28 and 0x29; using my customized library from https://github.com/hjd1964/Adafruit_TSL2591_Library
Adafruit_TSL2591 tsl = Adafruit_TSL2591(2591);

// return (invalid) if not implemented or if there's an error
double weatherSkyQuality() {
  if (!skyQualityGood) return (invalid);

  // safe-guard to invalidate stale readings after 30 seconds
  if ((long)((last_mag_per_sq_arcsec_time+30000UL)-millis()) < 0) last_mag_per_sq_arcsec = invalid;
  
/*
  // read data from TSL2591 (blocking)
  uint32_t lum;
  // this routine blocks for almost a full second in some cases, so fall back to last value if the roof is moving
  if (roofIsMoving()) return last_mag_per_sq_arcsec;
  lum = tsl.getFullLuminosity();
*/

  // read data from TSL2591 (non-blocking)
  uint32_t lum;
  static int stage = 1;
  if (stage == 1) { tsl.getFullLuminosity(TSL2591_GFL_INIT); stage++; return last_mag_per_sq_arcsec; }
  if (stage == 2) { if (tsl.getFullLuminosity(TSL2591_GFL_WAIT)) return last_mag_per_sq_arcsec; stage++; }
  if (stage == 3) { lum=tsl.getFullLuminosity(TSL2591_GFL_DONE); stage=1; }
  
  uint16_t ir = lum >> 16;
  uint16_t full = lum & 0xFFFF;

  // Serial.print(full); Serial.print(", "); Serial.println(ir);

  // automatically adapt gain and integration time
  if (!tsl.autoscale(full, ir)) return last_mag_per_sq_arcsec;
  
  // correct for sensor temperature sensitivity
  double t=weatherOutsideTemp();
  if (t != invalid) {
    full=tsl.temperatureCorrectCh0(t,full);
    ir  =tsl.temperatureCorrectCh1(t,ir);
  }

  // finally get the visible brightness in Lux
  double lux = tsl.calculateLux(full, ir);

  // Lux = Candela at 1 meter.
  // At 1 meter a 1 meter^2 surface has an approximately 60 deg fov so this TSL2591 effectively measures in Candela given a 60 deg TFOV lens.
  // Its sensitivity spread across the 180 deg FOV seems to be about right for 1 Candela with no lens, but I'm not an expert on this!
  // If using a 30 deg TFOV lens, for example, set WEATHER_SKY_QUAL_SCALE 4.0 since light from a smaller surface area is projected onto the sensor.
  double mag_per_sq_arcsec = WEATHER_SKY_QUAL_ZERO + log10((lux * WEATHER_SKY_QUAL_SCALE)/108000.0)/-0.4;
  last_mag_per_sq_arcsec = mag_per_sq_arcsec;
  last_mag_per_sq_arcsec_time = millis();
  
  return (last_mag_per_sq_arcsec);
}

bool initSkyQuality() {
  boolean ok=false;
  ok=tsl.begin();
  if (ok) {
    tsl.setGain(TSL2591_GAIN_MED);                   // 1x _LOW, 25x _MED, 428x _HIGH, 9876x _MAX (higher gain = more sensitivity)
    tsl.setTiming(TSL2591_INTEGRATIONTIME_300MS);    // _100MS, _200MS, _300MS, _400MS, _500MS, _600MS (higher integration time = more sensitivity)
  }
  return ok;
}
