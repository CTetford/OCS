// -----------------------------------------------------------------------------------------------------------------
// Weather functions

#include <Wire.h>
bool outsideTempGood=false, skyTempGood=false, windspeedGood=false, pressureGood=false, humidityGood=false, rainGood=false, skyQualityGood=false;

// =================================================================================================================
// =================================== add your weather sensor support below =======================================

// this is the Weather.ino file for my setup

#include <Adafruit_Sensor.h> // https://github.com/adafruit/Adafruit_Sensor

// -----------------------------------------------------------------------------------------------------------------
// gets outside temperature in deg. C

#include <Adafruit_Si7021.h> // https://github.com/adafruit/Adafruit_Si7021
Adafruit_Si7021 tempHumidity = Adafruit_Si7021(); // I2C address 0x40

// return (invalid) if not implemented or if there's an error
double weatherOutsideTemp() {
  if (!outsideTempGood) return invalid;

  double t = tempHumidity.readTemperature();
  if (t<-60.0 || t>60.0) t=invalid;
  return t;
}

bool initOutsideTemp() {
  tempHumidity.begin();
  return true;
}

// -----------------------------------------------------------------------------------------------------------------
// gets sky IR temperature in deg. C

#include <Adafruit_MLX90614.h> // https://github.com/adafruit/Adafruit-MLX90614-Library
Adafruit_MLX90614 mlx = Adafruit_MLX90614();  // I2C address 0x5A

// return (invalid) if not implemented or if there's an error
double weatherSkyTemp() {
  if (!skyTempGood) return (invalid);

  double t = mlx.readObjectTempC(); 
  if (t<-100.0 || t>100.0) t=invalid;
  return t;
}

bool initSkyTemp() {
  mlx.begin();
  return true;
}

// -----------------------------------------------------------------------------------------------------------------
// gets windspeed in kph

// return (invalid) if not implemented or if there's an error
double weatherWindspeed() {
  if (!windspeedGood) return (invalid);

  // for the Modern Devices wind sensor, https://moderndevice.com/product/wind-sensor-rev-p/
  const int OutPin = A6;   // wind sensor analog pin hooked up to Wind P sensor "OUT" pin
  int windADunits = analogRead(OutPin);
  double windMPH = pow((((float)windADunits - 264.0) / 85.6814), 3.36814);
  if (isnan(windMPH)) windMPH=0;
  double windKPH = windMPH * 1.60934;
// Temperature compensation isn't implemented
// const int TempPin = A7;   // temp sensor analog pin hooked up to Wind P sensor "TMP" pin
// int tempRawAD = analogRead(TempPin);
// double tempC = ((((float)tempRawAD * 5.0) / 1024.0) - 0.400) / .0195;
  if (windKPH<0 || windKPH>350) windKPH=invalid;
  return (windKPH);
}

bool initWindspeed() {
  return true;
}

// -----------------------------------------------------------------------------------------------------------------
// gets barometric pressure in mb

#define DEBUG_WEATHER OFF

#include <SFE_BMP180.h> // https://github.com/sparkfun/BMP180_Breakout_Arduino_Library I2C address 0x77
SFE_BMP180 pressure;

// return (invalid) if not implemented or if there's an error; absolute pressure
double weatherPressure() {
  if (!pressureGood) return (invalid);

  char status;
  double T,P,p0,a;
  p0=-1000;
  status = pressure.startTemperature();
  if (status != 0)
  {
    delay(status); // Wait for the measurement to complete

    // Retrieve the completed temperature measurement:
    // Note that the measurement is stored in the variable T.
    // Function returns 1 if successful, 0 if failure.
    status = pressure.getTemperature(T);
    if (status != 0)
    {
      // Start a pressure measurement:
      // The parameter is the oversampling setting, from 0 to 3 (highest res, longest wait).
      // If request is successful, the number of ms to wait is returned.
      // If request is unsuccessful, 0 is returned.
      status = pressure.startPressure(3);
      if (status != 0)
      {
        delay(status); // Wait for the measurement to complete

        // Retrieve the completed pressure measurement:
        // Note that the measurement is stored in the variable P.
        // Note also that the function requires the previous temperature measurement (T).
        // (If temperature is stable, you can do one temperature measurement for a number of pressure measurements.)
        // Function returns 1 if successful, 0 if failure.
        status = pressure.getPressure(P,T);
        if (status != 0)
        {
          p0=P;
        } else p0=-1003;
      } else p0=-1002;
    } else p0=-1001;
  } else p0=-1000;

#if DEBUG_PRESSURE == ON
  if (p0==-1003) Serial.println("Error retrieving pressure measurement");
  if (p0==-1002) Serial.println("Error starting pressure measurement");
  if (p0==-1001) Serial.println("Error retrieving temperature measurement");
  if (p0==-1000) Serial.println("Error starting temperature measurement");
#endif

  if (p0<invalid) p0=invalid;
  
  return p0;
}

// return (invalid) if not implemented or if there's an error; sea-level adjusted pressure
double weatherPressureSeaLevel() {
  if (!pressureGood) return (invalid);

  double P=weatherPressure();
  if (P==invalid) return P;
  
  // The pressure sensor returns abolute pressure, which varies with altitude.
  // To remove the effects of altitude, use the sealevel function and your current altitude.
  // This number is commonly used in weather reports.
  // Parameters: P = absolute pressure in mb, ALTITUDE = current altitude in m.
  // Result: p0 = sea-level compensated pressure in mb
  double p0 = pressure.sealevel(P,WEATHER_ALTITUDE);
  return p0;
}

bool initPressure() {
  return pressure.begin();
}

double getInsideTemp() {
  char status;
  double T;
  status = pressure.startTemperature();
  if (status != 0)
  {
    delay(status); // Wait for the measurement to complete

    // Retrieve the completed temperature measurement:
    // Note that the measurement is stored in the variable T.
    // Function returns 1 if successful, 0 if failure.
    status = pressure.getTemperature(T);
    if (status != 0)
    {
    }
  }
  if ((T<-60.0) || (T>60.0)) T=invalid;
  return T;
}

// -----------------------------------------------------------------------------------------------------------------
// gets relative humidity in %

// return (invalid) if not implemented or if there's an error
double weatherHumidity() {
  if (!humidityGood) return (invalid);

  double h=tempHumidity.readHumidity();
  if (h<0.0) h=invalid;
  if (h>100.0) h=100.0;
  return h;
}

bool initHumidity() {
  return true;
}

// -----------------------------------------------------------------------------------------------------------------
// gets rain sensor info. 1 is Rain, 2 is Warn, and 3 is Dry

// return (invalid) if not implemented or if there's an error
int weatherRain() {
  if (!rainGood) return invalid;
  return invalid;
}

bool initRain() {
  return false;
}

// -----------------------------------------------------------------------------------------------------------------
// gets sky brightness in mag/arc-sec^2

// return (invalid) if not implemented or if there's an error
double weatherSkyQuality() {
  return 19.0;
  if (!skyQualityGood) return invalid;
  return invalid;
}

bool initSkyQuality() {
  return true;
}

// ============================= no user changes are required beyond this point ====================================
// =================================================================================================================

// -----------------------------------------------------------------------------------------------------------------
// this gets called once on startup to initialize any weather sensors
void weatherInit() {
  // slow down i2c so long distances work, still plenty fast for our little data being moved around
  Wire.setClock(20000);
  analogReference(DEFAULT);

  // wiring has pullups enabled, for a 3.3V I2C device this isn't a good thing even this hack isn't 100% perfect 
  // since 5V is applied for an instant at startup use a level converter if this causes you to loose sleep

#if DEBUG_WEATHER == ON
  Serial.println("Debug weather start");
#endif

  outsideTempGood=initOutsideTemp();
  pinMode(20,INPUT); pinMode(21,INPUT);
#if DEBUG_WEATHER == ON
  if (outsideTempGood) Serial.println("OUTSIDE TEMP sense up"); else Serial.println("OUTSIDE TEMP sense fail");
#endif

  skyTempGood=initSkyTemp();
  pinMode(20,INPUT); pinMode(21,INPUT);
#if DEBUG_WEATHER == ON
  if (skyTempGood) Serial.println("SKY IR sense up"); else Serial.println("SKY IR sense fail");
#endif

  windspeedGood=initWindspeed();
  pinMode(20,INPUT); pinMode(21,INPUT);
#if DEBUG_WEATHER == ON
  if (windspeedGood) Serial.println("WINDSPEED sense up"); else Serial.println("WINDSPEED sense fail");
#endif

  pressureGood=initPressure();
  pinMode(20,INPUT); pinMode(21,INPUT);
#if DEBUG_WEATHER == ON
  if (pressureGood) Serial.println("PRESSURE sense up"); else Serial.println("PRESSURE sense fail");
#endif

  humidityGood=initHumidity();
  pinMode(20,INPUT); pinMode(21,INPUT);
#if DEBUG_WEATHER == ON
  if (humidityGood) Serial.println("HUMIDITY sense up"); else Serial.println("HUMIDITY sense fail");
#endif

  rainGood=initRain();
  pinMode(20,INPUT); pinMode(21,INPUT);
#if DEBUG_WEATHER == ON
  if (rainGood) Serial.println("RAIN sense up"); else Serial.println("RAIN sense fail");
#endif

  skyQualityGood=initSkyQuality();
  pinMode(20,INPUT); pinMode(21,INPUT);
#if DEBUG_WEATHER == ON
  if (skyQualityGood) Serial.println("SKY QUAL up"); else Serial.println("SKY QUAL fail");
#endif
}