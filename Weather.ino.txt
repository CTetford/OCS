// -----------------------------------------------------------------------------------------------------------------
// Weather functions
// this is the Weather.ino file for my setup

// the see the SparkFun, Adafruit, etc. product setup guides to find the libraries and instructions for installing them
#include <Wire.h>
#include <Adafruit_MLX90614.h>
#include <SparkFun_Si7021_Breakout_Library.h>
#include <SFE_BMP180.h>

bool skyGood=false;
Adafruit_MLX90614 mlx = Adafruit_MLX90614();

SFE_BMP180 pressure;
bool pressureGood=false;
#define DEBUG_PRESSURE_OFF

Weather tempHumidity;
bool tempHumidityGood=false;

// this gets called once on startup to initialize any weather sensors
void weatherInit() {
  analogReference(DEFAULT);

  // wiring has pullups enabled, for a 3.3V I2C device this isn't a good thing
  // even this hack isn't 100% perfect since 5V is applied for an instant at startup
  // use a level converter if this causes you to loose sleep
  tempHumidity.begin(); tempHumidityGood=true;
  pinMode(20,INPUT); pinMode(21,INPUT);
  
  if (pressure.begin()) pressureGood=true;
  pinMode(20,INPUT); pinMode(21,INPUT);

  mlx.begin(); skyGood=true;
  pinMode(20,INPUT); pinMode(21,INPUT);
}

// gets outside temperature in deg. C
// return (invalid) if not implemented or if there's an error
double weatherOutsideTemp() {
  if (!tempHumidityGood) return invalid;
  return tempHumidity.getTemp();
}

// gets sky IR temperature in deg. C
// return (invalid) if not implemented or if there's an error
double weatherSkyTemp() {
  if (!skyGood) return (invalid);
  return mlx.readObjectTempC();
}

// gets windspeed in kph
// the returned value should be the highest measured speed over a 1 minute period
// return (invalid) if not implemented or if there's an error
double weatherWindspeed() {
  return (invalid);
}

// gets absolute barometric pressure in mb (not sea-level adjusted)
// return (invalid) if not implemented or if there's an error
double weatherPressure() {
  if (!pressureGood) return (invalid);

  char status;
  double T,P,p0,a;
  p0=-1000;
  status = pressure.startTemperature();
  if (status != 0)
  {
    delay(status); // Wait for the measurement to complete

    // Retrieve the completed temperature measurement:
    // Note that the measurement is stored in the variable T.
    // Function returns 1 if successful, 0 if failure.
    status = pressure.getTemperature(T);
    if (status != 0)
    {
      // Start a pressure measurement:
      // The parameter is the oversampling setting, from 0 to 3 (highest res, longest wait).
      // If request is successful, the number of ms to wait is returned.
      // If request is unsuccessful, 0 is returned.
      status = pressure.startPressure(3);
      if (status != 0)
      {
        delay(status); // Wait for the measurement to complete

        // Retrieve the completed pressure measurement:
        // Note that the measurement is stored in the variable P.
        // Note also that the function requires the previous temperature measurement (T).
        // (If temperature is stable, you can do one temperature measurement for a number of pressure measurements.)
        // Function returns 1 if successful, 0 if failure.
        status = pressure.getPressure(P,T);
        if (status != 0)
        {
          p0=P;
        } else p0=-1003;
      } else p0=-1002;
    } else p0=-1001;
  } else p0=-1000;

#ifdef DEBUG_PRESSURE_ON
  if (p0==-1003) Serial.println("Error retrieving pressure measurement");
  if (p0==-1002) Serial.println("Error starting pressure measurement");
  if (p0==-1001) Serial.println("Error retrieving temperature measurement");
  if (p0==-1000) Serial.println("Error starting temperature measurement");
#endif

  if (p0<invalid) p0=invalid;
  
  return p0;
}

// gets barometric pressure in mb (sea-level adjusted)
// return (invalid) if not implemented or if there's an error
double weatherPressureSeaLevel() {
  {
    double P=weatherPressure();
    if (P==invalid) return P;
    
    // The pressure sensor returns abolute pressure, which varies with altitude.
    // To remove the effects of altitude, use the sealevel function and your current altitude.
    // This number is commonly used in weather reports.
    // Parameters: P = absolute pressure in mb, ALTITUDE = current altitude in m.
    // Result: p0 = sea-level compensated pressure in mb
    double p0 = pressure.sealevel(P,WEATHER_ALTITUDE);
    return p0;
  }
}

// gets relative humidity in %
// return (invalid) if not implemented or if there's an error
double weatherHumidity() {
  if (!tempHumidityGood) return (invalid);
  return tempHumidity.getRH();
}

// gets rain sensor info. 1 is Rain, 2 is Warn, and 3 is Dry
// return (invalid) if not implemented or if there's an error
// this is for the typical eBay rain sensor like this one:
// http://www.ebay.com/itm/Raindrops-Detection-sensor-modue-rain-module-weather-module-Humidity-For-Arduino-/400439668701
#define WEATHER_RAIN_THRESHOLD_LOW 0.25
#define WEATHER_RAIN_THRESHOLD_HIGH 0.75
int weatherRain() {
  double rain = (double)analogRead(A2)/1023.0; // scale for 0.0 to 1.0 range

  if (rain <= WEATHER_RAIN_THRESHOLD_LOW) return 1; else
  if (rain > WEATHER_RAIN_THRESHOLD_HIGH) return 3; else return 2;
}

// gets sky brightness in mag/arc-sec^2
// return (invalid) if not implemented or if there's an error
double weatherSkyQuality() {
  return (invalid);
}